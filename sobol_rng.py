from tina.common import *
import timeit
import numba


DIM, LOG = 40, 30


V_TMPL = np.array([ # {{{
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
         1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 3, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 3, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 7, 13, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 5, 11, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 5, 1, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 7, 3, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 7, 7, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 9, 23, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 3, 5, 19, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 3, 13, 11, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 7, 13, 25, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 5, 11, 7, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 3, 13, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 1, 15, 17, 63, 13, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 5, 5, 1, 27, 33, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 3, 3, 25, 17, 115, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,   0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 3, 15, 29, 15, 41, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 1, 7, 3, 23, 79, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 7, 9, 31, 29, 17, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 5, 13, 11, 3, 29, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 1, 9, 5, 21, 119, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,   0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 3, 1, 23, 13, 75, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 3, 11, 27, 31, 73, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 7, 7, 19, 25, 105, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,   0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 5, 5, 21, 9, 7, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 15, 5, 49, 59, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 1, 1, 1, 33, 65, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 5, 15, 17, 19, 21, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 7, 11, 13, 29, 3, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 7, 5, 7, 11, 113, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,   0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 5, 3, 15, 19, 61, 0, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 3, 1, 1, 9, 27, 89, 7, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0],
        [1, 1, 3, 7, 31, 15, 45, 23, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0],
        [1, 3, 3, 9, 9, 25, 107, 39, 0, 0, 0, 0, 0, 0, 0,
         0, 0, 0, 0, 0, 0,  0,   0,  0, 0, 0, 0, 0, 0, 0]]
) # }}}

POLY = np.array([
        1,   3,   7,   11,  13,  19,  25,  37,  59,  47,  61,  55,  41,  67,
        97,  91,  109, 103, 115, 131, 193, 137, 145, 143, 241, 157, 185, 167,
        229, 171, 213, 191, 253, 203, 211, 239, 247, 285, 369, 299])

N0 = 0xffffffff
N1 = 0xfffffffe


def GetHighestBitPos(n):
    # Returns the position of the high 1 bit base 2 in an integer.
    bit = 0
    while n > 0:
        bit += 1
        n >>= 1
    return bit


def GetLowestBitPos(n):
    # Returns the position of the low 0 bit base 2 in an integer.
    bit = 1
    while n != (n & N1):
        bit += 1
        n >>= 1
    return bit


def GenVG(dim):
    vg = np.full((dim, LOG), 0)

    for i in range(dim):
        for j in range(LOG):
            vg[i, j] = V_TMPL[i, j]

    for i in range(2, dim + 1):
        m = GetHighestBitPos(POLY[i - 1] >> 1)

        inc = np.full(m, 0)

        l = POLY[i - 1]
        for k in range(m, 0, -1):
            inc[k - 1] = l != (l & N1)
            l >>= 1

        for j in range(m + 1, LOG + 1):
            newv = vg[i - 1, j - m - 1]
            l = 1
            for k in range(1, m + 1):
                l <<= 1
                if inc[k - 1]:
                    newv ^= l * vg[i - 1, j - k - 1]
            vg[i - 1, j - 1] = newv

    l = 1
    for j in range(LOG, 0, -1):
        for k in range(dim):
            vg[k, j - 1] *= l
        l <<= 1

    return vg


def GenSSS(nsamples):
    nshift = [0 for i in nsamples]
    for i in range(len(nsamples)):
        nshift[i] = GetHighestBitPos(nsamples[i])
    return nshift


class Sobol:
    def __init__(self, nsamples, skip=0):
        self.dim = len(nsamples)
        self.vg = GenVG(self.dim)
        self.seed = 0
        self.nsamples = np.array(nsamples)
        self.last_q = np.full(self.dim, 0)
        self.last_sample = np.full(self.dim, -1)
        self.nshift = np.array(GenSSS(nsamples))

        for i in self.nshift:
            assert i != 0

        for i in range(skip):
            self.nextImpl()

        assert skip == self.seed

    def nextImpl(self):
        l = GetLowestBitPos(self.seed)
        if LOG < l:
            self.seed = 0
        else:
            self.seed += 1

        self.last_sample = self.last_q >> (LOG + 1 - self.nshift)
        self.last_q ^= self.vg[:, l]

        return np.any(self.nsamples < self.last_sample)

    def next(self):
        while self.nextImpl():
            print('invalid sample encountered!')
        return self.last_sample


n = 4096
rng = Sobol([n] * 32, 173)

rng.next()
print(timeit.timeit(lambda: rng.next(), number=16**2 * 60))
